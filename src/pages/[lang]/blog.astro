---
import { languages } from "@i18n/ui"

export async function getStaticPaths() {
    const paths = Object.keys(languages).map((lang) => {
        return { params: { lang: lang, slug: "blog" } }
    })

    return paths
}

import {
    getLangFromUrl,
    useTranslations,
    useTranslatedPath,
    getSlugWithoutLang,
} from "@i18n/utils"

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

import { getCollection } from "astro:content"

import BaseLayout from "@layouts/BaseLayout.astro"

import ContactCTA from "@components/ContactCTA.astro"
import BlogPreview from "@components/BlogPreview.astro"
import Hero from "@components/Hero.astro"
import Grid from "@components/Grid.astro"

// Get all articles in the selected language
const posts_current_lang = (await getCollection("blog"))
    .filter((post) => post.slug.startsWith(lang))
    .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
// Get the other articles
const posts_other_langs = (await getCollection("blog"))
    .filter((post) => !post.slug.startsWith(lang))
    .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
// Now, combine both list and filter them.
// If a post is translated into the current language and other language, it will
// be displayed only once and in the currently selected language.
const posts = posts_current_lang
    .concat(...posts_other_langs)
    .reduce((acc, current) => {
        if (
            !acc.find(
                (item) =>
                    getSlugWithoutLang(item.slug) ===
                    getSlugWithoutLang(current.slug)
            )
        ) {
            acc.push(current)
        }
        return acc
    }, [])
    .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
---

<BaseLayout
    title={t("blog.document.title")}
    description={t("blog.document.description")}
>
    <div class="stack gap-20">
        <main class="wrapper stack gap-8">
            <Hero
                title={t("blog.hero.title")}
                tagline={t("blog.hero.tagline")}
                align="start"
            />
            <div
                class="mx-auto mt-10 grid w-full max-w-2xl grid-cols-1 gap-x-8 gap-y-12 border-gray-200 md:grid-cols-2 lg:max-w-none lg:grid-cols-3"
            >
                {posts.map((post) => <BlogPreview post={post} />)}
            </div>
        </main>
        <ContactCTA />
    </div>
</BaseLayout>
